name: 'MANUAL DEPLOYMENT'
run-name: 'Manual deployment on environment ${{ inputs.environment }} from branch ${{github.ref_name}} execute by @${{ github.actor }}'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        type: choice
        default: test
        options:
          - test
          - prod

env:
  NODE_VERSION: 20

jobs:

  setup-environment:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: "setup-node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "Manage cache"
        uses: ./.github/actions/manage-cache/
        with:
          NODE_VERSION: ${{ env.NODE_VERSION }}
          LOCK_PATH: "**/package-lock.json"

      - name: "Install dependencies"
        run: |
          npm ci
        shell: bash

      - name: "Compile and build lambda"
        run: |
          npm run build
          zip lambda/build/index.zip lambda/build/index.js
        shell: bash

  plan:
    needs:
      - setup-environment
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac/
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:

      - name: checkout
        uses: actions/checkout@v4

      - name: configure terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.4.5

      - name: configure credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: "Manage cache"
        uses: ./.github/actions/manage-cache/
        with:
          NODE_VERSION: ${{ env.NODE_VERSION }}
          LOCK_PATH: "**/package-lock.json"

      - name: init terraform
        run: terraform init -backend-config=./var/${{ github.event.inputs.environment }}/backend.tfbackend -reconfigure
        shell: bash

      - name: plan terraform
        run: |
          output=$(terraform plan -var-file="./var/${{ github.event.inputs.environment }}/values.tfvars" -no-color)
          echo "## Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        shell: bash

      - name: "Terraform output"
        working-directory: ./iac
        run: |
          mkdir -p ../src/js
          terraform output -json > ../src/js/config.json
        shell: bash


  build-app:
    needs:
      - plan
      - setup-environment
    runs-on: ubuntu-latest
    steps:

      - name: checkout
        uses: actions/checkout@v4

      - name: "setup-node"
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: "Manage cache"
        uses: ./.github/actions/manage-cache/
        with:
          NODE_VERSION: ${{ env.NODE_VERSION }}
          LOCK_PATH: "**/package-lock.json"

      - name: "Install dependencies"
        run: |
          npm ci
        shell: bash

      - name: "Get informations files"
        run: |
          echo "${{ secrets.INFORMATIONS }}" > ./src/ts/informations.ts
          echo "${{ secrets.ENCRYPT }}" > ./src/ts/encrypt.ts
        shell: bash

      - name: "Compile and build webpage"
        run: |
          ls ./src/
          ls ./lambda/build/
          ls ./src/js/
          npm run build-app
        shell: bash

  deploy:
    needs:
      - plan
      - build-app
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac/
    environment:
      name: ${{ github.event.inputs.environment }}
      url: "https://cv-demo-${{ github.event.inputs.environment }}.theo-tonneau.com"
    steps:

      - name: checkout
        uses: actions/checkout@v4

      - name: configure terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.4.5

      - name: configure credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3
          
      - name: "Manage cache"
        uses: ./.github/actions/manage-cache/
        with:
          NODE_VERSION: ${{ env.NODE_VERSION }}
          LOCK_PATH: "**/package-lock.json"

      - name: init terraform
        run: terraform init -backend-config=./var/${{ github.event.inputs.environment }}/backend.tfbackend -reconfigure
        shell: bash

      - name: apply terraform
        run: terraform apply -var-file="./var/${{ github.event.inputs.environment }}/values.tfvars" -auto-approve
        shell: bash

      - name: sync-s3
        run: |
          aws s3 cp ./src/ s3://cv-demo-tonneau-test/ --recursive \
          --exclude "*" \
          --include "index.html" \
          --include "img/*" \
          --include "img/certification/*" \
          --include "img/education/*" \
          --include "img/website/*" \
          --include "js/index.js" \
          --include "css/style.css" \
          --exclude "ts/*"
        shell: bash